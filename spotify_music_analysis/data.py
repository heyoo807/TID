# -*- coding: utf-8 -*-
"""spotify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iAwNnIIbKBPd-ZmOW8YqigMYW3scEWlB
"""

# 한글 폰트 깨짐 방지 -> 런터임 다시 실행 


import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import pprint

class Spotify_audio_features:
    def __init__(self):
        # initial setting
        cid = '94a195e4804a44a3a94934419e40711c'
        secret = '25ed76f5cb9140b38c46058a30bb20f6'

        client_credentials_manager = SpotifyClientCredentials(client_id=cid, client_secret=secret)
        self.sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
        
    def get_features(self, song):
        # get track id information
        track_info = self.sp.search(q=song, type='track', market='JP')
        track_id = track_info["tracks"]["items"][0]["id"]

        # get audio_feature
        features = self.sp.audio_features(tracks=[track_id])
        acousticness = features[0]["acousticness"]
        danceability = features[0]["danceability"]
        duration_ms = features[0]["duration_ms"]
        energy = features[0]["energy"]
        instrumentalness = features[0]["instrumentalness"]
        key = features[0]["instrumentalness"]
        liveness = features[0]["liveness"]
        loudness = features[0]["loudness"]
        mode = features[0]["mode"]
        speechiness	 = features[0]["speechiness"]
        tempo = features[0]["tempo"]
        time_signature = features[0]["time_signature"]
        valence = features[0]["valence"]

        result = {"acousticness" : acousticness,
                    "danceability" : danceability,
                    "duration_ms" : duration_ms,
                    "energy" : energy,
                    "instrumentalness" : instrumentalness,
                    "key" : key, 
                    "liveness" : liveness,
                    "loudness" : loudness,
                    "mode" : mode,
                    "speechiness" : speechiness,
                    "tempo" : tempo,
                    "time_signature" : time_signature,
                    "valence" : valence}

        return result




import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from math import pi
from matplotlib.path import Path
from matplotlib.spines import Spine
from matplotlib.transforms import Affine2D
from pandas.core import frame

# from main import Spotify_audio_features -> 나중에 클래스 파일을 main.py로 저장후 임포트해서 사용

saf = Spotify_audio_features()
song_title = "거짓말같은시간"

feat = saf.get_features(song_title)
df = pd.DataFrame({
    'song': [song_title],
    'danceability': [feat['danceability']],
    'energy': [feat['energy']],
    'valence': [feat['valence']]
})
print(df)

matplotlib.rc('font', family='malgun gothic')
labels = df.columns[1:]
num_labels = len(labels)
print(num_labels)

angles = [x/float(num_labels)*(2*pi) for x in range(num_labels)]
angles += angles[:1]
print(angles)

# color depending on the mode (major or minor)
if feat['mode'] == 1: color = "steelblue"
else: color = "mediumseagreen"

fig = plt.figure(figsize=(5,5)) # Window size, figsize-tuple x 100 pixel...
fig.set_facecolor('white') # background color

for i, row in df.iterrows():
    print(i)
    print(row)
    data = df.iloc[i].drop('song').tolist()
    data += data[:1]
    print(data)

    # generate graphs
    ax = plt.subplot(1,1,i+1, polar=True) #args : nrows, ncols, index, **kwargs
    ax.set_theta_offset(pi / 2) 
    ax.set_theta_direction(-1)

    plt.xticks(angles[:-1], labels, fontsize=13)
    ax.tick_params(axis='x', which='major', pad=15)

    ax.set_rlabel_position(0)
    plt.yticks([0,0.2,0.4,0.6,0.8,1], ['0','0.2','0.4','0.6','0.8','1'], fontsize=8)
    plt.ylim(0,1)

    ax.plot(angles, data, color=color, linewidth=2, linestyle='solid')
    ax.fill(angles, data, color=color, alpha=0.4)

    plt.title(row.song, size=20)

plt.tight_layout(pad=5)
plt.show()

"""*  참고 : https://conansjh20.tistory.com/?page=1"""